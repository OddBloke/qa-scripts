#!/bin/sh

ORIG_TIP=""
TEMP_D=""
CR='
'
error() { echo "$@" 1>&2; }
fail() {
    [ $# -eq 0 ] || error "$@";
    if [ -n "$ORIG_TIP" ]; then 
        error "reset to previous tip with: git reset --hard $ORIG_TIP"
    fi
    exit 1;
}

Usage() {
cat <<EOF
${0##*/} [branch]
    update current branch with trunk branch.
    branch defaults to 'master'
EOF
}

print_commit() {
    local subject="$1" author="$2" bugs="$3" aname="" buf="" abugs=""
    local indent="    - " indent2="      " ll=79
    aname=${author% <*}
    case "$aname" in
        # core team members do not need credit in changelog.
        Scott\ Moser|Chad\ Smith|Ryan\ Harper) aname="";;
    esac
    abugs="${aname:+ [${aname}]}${bugs:+ (LP: ${bugs})}"
    if [ $((${#subject}+${#abugs})) -le $(($ll-${#indent})) ]; then
        echo "${indent}${subject}${abugs}"
    elif [ ${#subject} -ge $(($ll-${#indent})) ]; then
        echo "${subject}${abugs}" |
            fmt --width=$(($ll-${#indent})) |
            sed -e "1s/^/${indent}/; 1n;" \
                -e 's/^[ ]*//' \
                -e '/^[ ]*$/d' -e "s/^/$indent2/" -e 's/[ ]\+$//'

    else
        ( echo "${subject}"; echo "${abugs}" ) |
            fmt --width=$(($ll-${#indent})) |
            sed -e "1s/^/${indent}/; 1n;" \
                -e 's/^[ ]*//' \
                -e '/^[ ]*$/d' -e "s/^/$indent2/" -e 's/[ ]\+$//'
    fi
}

git_log_to_dch() {
    local line="" commit="" lcommit="" bugs=""
    while :; do
        read line || break
        case "$line" in
            commit\ *)
                if [ -n "$commit" ]; then
                    print_commit "$subject" "$author" "$bugs"
                fi
                commit=${line#*: }
                bugs=""
                author=""
                subject=""
                ;;
            Author:*) author="${line#Author: }";;
            LP:*) bugs="${bugs:+${bugs}, }${line#*: }";;
            "") [ -z "$subject" ] && read subject;;
        esac
    done
    if [ -n "$commit" ]; then
        print_commit "$subject" "$author" "$bugs"
    fi
}

run_quilt() {
    local diffargs="-p ab --no-timestamps --no-index"
    QUILT_PATCHES="debian/patches" \
        QUILT_DIFF_OPTS="-p" \
        QUILT_PATCH_OPTS="--reject-format=unified" \
        QUILT_DIFF_ARGS="$diffargs --color=auto" \
        QUILT_REFRESH_ARGS="$diffargs" \
        LANG=C \
        quilt --quiltrc - "$@"
}

cleanup() {
    [ ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}

from_ref=${1:-"master"}
cur_branch=$(git rev-parse --abbrev-ref HEAD) ||
   fail "failed to get current branch"
ORIG_TIP=$(git rev-parse HEAD) ||
   fail "failed to get current tip"

case "$cur_branch" in
    ubuntu/*) :;;
    *) 
        if [ "${SKIP_BRANCH_NAME_CHECK:-0}" = "0" ]; then
            error "You are on branch '$cur_branch', expect to be on ubuntu/*"
            fail "skip this check with SKIP_BRANCH_NAME_CHECK=1"
        else
            error "skipping branch check. cur_branch=$cur_branch"
        fi
    ;;
esac

TEMP_D=$(mktemp -d) || fail "failed mktemp"
trap cleanup EXIT

prev_pkg_ver=$(dpkg-parsechangelog --show-field Version) ||
   fail "failed reading package version"
pkg_name=$(dpkg-parsechangelog --show-field Source) ||
   fail "failed to read Source from changelog"

# if present, pull the '~16.04.x' off of the previous entry.
sru_ver_suff=$(echo "$prev_pkg_ver" | sed 's,.*~\([0-9.]*\)[.][0-9]$,~\1.1,')
[ "${sru_ver_suff}" = "${prev_pkg_ver}" ] && sru_ver_suff=""

# turn 0.7.7-10-gbc2c326-0ubuntu1 into 'bc2c326'
t=${prev_pkg_ver%-*}
prev_pkg_hash=${t##*-g}

new_pkg_debian="0ubuntu1"
new_upstream_ver=$(git describe --abbrev=8 "${from_ref}")
new_pkg_ver="${new_upstream_ver}-${new_pkg_debian}${sru_ver_suff}"

case "$new_upstream_ver" in
    *-[0-9]*-g[a-f0-9]*) new_msg="New upstream snapshot.";;
    [0-9][0-9].[0-9]) new_msg="New upstream release.";;
    *) fail "unrecognized upstream version '$new_upstream_ver'";;
esac

prev_upstream_ver=${prev_pkg_ver%-*}
if [ "${prev_upstream_ver}" = "${new_upstream_ver}" ]; then
    echo "nothing to commit.  '$from_ref' is at ${new_upstream_ver}."
    exit 0
fi

prev_dist=$(dpkg-parsechangelog --show-field Distribution)
if [ "$prev_dist" = "UNRELEASED" ]; then
    prev_released_pkg_ver=$(
        dpkg-parsechangelog --offset 1 --count=1 --show-field Version)
    unreleased_changes=$(
        dpkg-parsechangelog --count=1 --show-field Changes | tail -n +4)
else
    prev_released_pkg_ver="${prev_pkg_ver}"
fi
#echo "prev_released_pkg_ver=$prev_released_pkg_ver"
#echo "unreleased=${unreleased_changes}"

dpseries="debian/patches/series"
drops=""
if [ -e $dpseries ]; then
   drops=""
   while read bname extra; do
      case "$bname" in
         cpick-*)
            commit=${bname#cpick-}
            commit=${commit%%-*}
            echo "bname=$bname commit=${commit}" 1>&2
            if git merge-base --is-ancestor "$commit" "$from_ref"; then
               drops="${drops} debian/patches/$bname"
            fi
            ;;
         *) echo "$bname${extra:+ ${extra}}";;
      esac
   done < $dpseries > "${TEMP_D}/series"
   drops=${drops# }
   if [ -n "$drops" ]; then
      cp "${TEMP_D}/series" "$dpseries" ||
         fail "failed copying to $dpseries"
      if [ ! -s $dpseries ]; then
         git rm --force "$dpseries" ||
            fail "failed removing empty $dpseries: git rm $dpseries"
      fi
      msg="drop cherry picks before merge from ${from_ref} at $new_upstream_ver"
      msg="$msg${CR}${CR}drop the following cherry picks:"
      for file in $drops; do
         git rm "$file" || fail "failed to git rm $file"
         msg="${msg}$CR  ${file##*/}"
      done
      git commit -m "$msg" "$dpseries" $drops
   fi
fi

git merge "${from_ref}" -m "merge from $from_ref at $new_upstream_ver" ||
    fail "failed: git merge ${from_ref} -m 'merge from $from_ref ..'"
clog="${TEMP_D}/changelog"
gitlog="${TEMP_D}/gitlog"

rm -Rf .pc
refreshed=""
if [ -f "$dpseries" ]; then
    # refresh any patches.
    while :; do
        npatch=$(run_quilt next 2>&1)
        ret=$?
        [ $ret -eq 2 ] && break
        [ $ret -ne 0 ] && fail "quilt next returned $ret: $npatch"
        out=$(run_quilt push 2>&1) ||
            fail "patch $npatch does not apply: $out"
        out=$(run_quilt refresh -p ab) ||
            fail "patch $npatch failed refresh: $out"
    done
    refreshed=$(git diff --name-only debian/patches/)
    quilt pop -a || fail "failed quilt pop -a"
    rm -Rf .pc
    if [ -n "$refreshed" ]; then
        msg=$(echo "refresh patches"
            echo
            echo "refresh the following against upstream ${new_upstream_ver}:"
            for i in ${refreshed}; do echo "  $i"; done)
        git commit -m "$msg" $refreshed ||
            fail "failed to commit refreshed patches: $refreshed"
    fi
fi

git log --first-parent --no-decorate --format=full \
   "${prev_pkg_hash}..${from_ref}" >  "$gitlog" ||
   fail "failed git log ${prev_pkg_hash}..${from_ref}"

{
cat <<EOF
$pkg_name ($new_pkg_ver) UNRELEASED; urgency=medium

EOF
if [ -n "${unreleased_changes}" ]; then
    echo "${unreleased_changes}"
fi
if [ -n "$drops" ]; then
    echo "  * Drop the following cherry picks in debian/patches."
    echo "    They are now incorporated in the upstream source:"
    for i in ${drops}; do echo "    + ${i##*/}"; done
fi
if [ -n "${refreshed}" ]; then
   echo "  * Refresh patches against upstream:"
   for i in ${refreshed}; do echo "    + ${i##*/}"; done
fi

echo "  * $new_msg${sru_ver_suff:+ (LP: #SRU_BUG_NUMBER_HERE)}"
git_log_to_dch < "$gitlog" ||
   fail "failed git_log_to_dch"
cat <<EOF

 -- ${DEBFULLNAME} <$DEBEMAIL>  $(date -R)

EOF
} > "$clog"

{
   cat "$clog" &&
   sed -n "/${prev_released_pkg_ver}/,\$p" "debian/changelog"
} > "${TEMP_D}/newlog" ||
   fail "failed writing new changelog"

cp "$TEMP_D/newlog" "debian/changelog" ||
   fail "failed replacing debian/changelog"

dch -e || fail "dch -e exited $?"

git diff

echo -n "Commit this change? (Y/n): "
read answer || fail "failed to read answer"
case "$answer" in
   n|[Nn][oO]) fail;;
esac

msg="update changelog (${new_msg%.} $new_upstream_ver)."
git commit -m "$msg" debian/changelog ||
   fail "failed to commit '$msg'"
