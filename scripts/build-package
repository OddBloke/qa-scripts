#!/bin/bash
# https://gist.github.com/smoser/6391b854e6a80475aac473bba4ef0310

VERBOSITY=0
TEMP_D=""
START_D="$PWD"

cleanup(){
    [ ! -d "$TEMP_D" ] || rm -Rf "$TEMP_D";
    git worktree prune
}
error() { echo "$@" 1>&2; }
fail() { [ $# -eq 0 ] || error "$@"; exit 1; }

Usage() {
    cat <<EOF
Usage: ${0##*/} [ options ] <<ARGUMENTS>>

   build a package, put output in ../out

   options:
      --ref R         what to build from [default to current branch].
    -o | --output D   put output in D. [default ../out]
EOF
}

bad_Usage() { Usage 1>&2; [ $# -eq 0 ] || error "$@"; return 1; }

debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "${@}"
}

main() {
    local short_opts="ho:v"
    local long_opts="help,output:,ref:,verbose"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { bad_Usage; return; }

    local cur="" next="" out_d="../out" ref="" offset="1"

    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            -h|--help) Usage ; exit 0;;
            -o|--output) out_d=$next; shift;;
            -v|--verbose) VERBOSITY=$((${VERBOSITY}+1));;
               --ref) ref=$next; shift;;
            --) shift; break;;
        esac
        shift;
    done

    if [ -z "$ref" ]; then
        cur_branch=$(git rev-parse --abbrev-ref HEAD) ||
            fail "failed to get current branch"
        ref="$cur_branch"
    fi

    TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX") ||
        fail "failed to make tempdir"
    trap cleanup EXIT

    local wtd="${TEMP_D}/wtd" pkg_ver pkg_name upstream_ver upstream_hash
    local orig_tarball orig_tarball_fp
    git worktree add --force "$wtd" "$ref" ||
        fail "failed worktree add $wtd $ref"

    pkg_ver=$( cd "$wtd" && dpkg-parsechangelog --show-field Version) ||
        fail "failed reading package version"
    pkg_name=$(cd "$wtd" && dpkg-parsechangelog --show-field Source) ||
        fail "failed to read Source from changelog"

    upstream_ver=${pkg_ver%-*}
    # turn 0.7.7-10-gbc2c326-0ubuntu1 into 'bc2c326'
    upstream_hash=${upstream_ver##*-g}

    local native=false
    case "${pkg_ver}" in
        *-*) :;;
        *) error "Native package assumed."; native=true;;
    esac

    if [ "$native" = "true" ]; then
        error "Native package format."
    else
        orig_tarball="${pkg_name}_${upstream_ver}.orig.tar.gz"
        orig_tarball_fp=""
        for p in .. ../dl; do
            [ -e "$p/$orig_tarball" ] &&
                orig_tarball_fp="$p/$orig_tarball" && break
        done
        if [ -n "$orig_tarball_fp" ]; then
            error "Using existing orig tarball in $orig_tarball_fp"
        elif [ -x tools/make-tarball ]; then
            if [ ! -d "../dl" ]; then
                mkdir ../dl ||
                   fail "failed to create ../dl from $PWD"
                error "created ../dl from $PWD for orig tarballs."
            fi
            orig_tarball_fp="../dl/$orig_tarball"
            error "creating $orig_tarball_fp using" \
                "make-tarball --output=$orig_tarball_fp $upstream_hash"
            ./tools/make-tarball "--output=$orig_tarball_fp" "$upstream_hash" ||
                fail "failed to make tarball"
        else
            get-orig-tarball -v ${offset:+--offset=${offset}} ||
                fail "failed to get orig tarball for $pkg_name at $pkg_ver"
        fi
        orig_tarball_fp=$(readlink -f "$orig_tarball_fp")
        ln -s "$orig_tarball_fp" "$TEMP_D"
    fi

    if [ $# -eq 0 ]; then
        set -- -d -S
    fi
    ( cd "$wtd" && debuild "$@" )

    ( for f in "$TEMP_D/"*; do echo "$f"; done )

    mkdir -p "$out_d"
    for f in "${TEMP_D}/"*; do
        [ ! -f "$f" ] || cp "$f" "$out_d" && echo "wrote ${out_d}/${f##*/}"
    done
    return 0
}

main "$@"
# vi: ts=4 expandtab
